# -*- coding: utf-8 -*-
"""Untitled6.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Y21Lkcd4VNTQ9j2zUGLrLfxtMbtczFC1
"""

# ðŸ“Œ Step 1: Install & Import Libraries
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.preprocessing import OneHotEncoder
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline
import matplotlib.pyplot as plt

# ðŸ“Œ Step 2: Upload CSV Dataset
from google.colab import files
uploaded = files.upload()

# ðŸ“Œ Step 3: Load the Dataset
df = pd.read_csv("spendly_final_dataset_10_years.csv")

# ðŸ“Œ Step 4: Prepare Input and Output
categories = ['Food', 'Vacation', 'Transport', 'Education', 'Rent',
              'Entertainment', 'Investment', 'EMI', 'Savings']

X = df[['Month', 'Income_Type', 'Payment_Method', 'Amount_to_be_Spent']]
# Normalize target outputs to percentages
y_raw = df[categories]
y = y_raw.div(y_raw.sum(axis=1), axis=0)  # Convert to % share

# ðŸ“Œ Step 5: Preprocessing
categorical_cols = ['Month', 'Income_Type', 'Payment_Method']

preprocessor = ColumnTransformer([
    ('cat', OneHotEncoder(handle_unknown='ignore'), categorical_cols)
], remainder='passthrough')

# ðŸ“Œ Step 6: Train/Test Split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# ðŸ“Œ Step 7: Pipeline Model
model = Pipeline([
    ('preprocess', preprocessor),
    ('regressor', RandomForestRegressor(n_estimators=200, random_state=42))
])

model.fit(X_train, y_train)

# ðŸ“Œ Step 8: Get Inputs from User
print("ðŸ”½ Please provide your monthly input details:\n")
month = input("Enter Month (e.g., January, February, ...): ")
income_type = input("Enter Income Type (Salary, Business, Investment Returns, Real Estate Rents): ")
payment_method = input("Enter Payment Method (Cash, Card, UPI, Net Banking): ")
amount = float(input("Enter Total Amount You Wish to Spend This Month (e.g., 50000): "))

user_input = pd.DataFrame([{
    'Month': month,
    'Income_Type': income_type,
    'Payment_Method': payment_method,
    'Amount_to_be_Spent': amount
}])

# ðŸ“Œ Step 9: Make Prediction
predicted_percent = model.predict(user_input)[0]

# Fix negative values and normalize to sum = 1
predicted_percent = np.maximum(predicted_percent, 0)
predicted_percent /= predicted_percent.sum()

# Convert to â‚¹ amounts
predicted_amounts = predicted_percent * amount
predicted_dict = dict(zip(categories, predicted_amounts))

# ðŸ“Œ Step 10: Display Results
print("\nðŸŽ¯ Recommended Monthly Spending Breakdown:")
for k, v in predicted_dict.items():
    print(f"{k}: â‚¹{round(v, 2)}")

# âœ… Pie Chart: Savings vs Total Spendings
spendings_total = amount - predicted_dict['Savings']
savings = predicted_dict['Savings']

plt.figure(figsize=(6,6))
plt.pie([spendings_total, savings],
        labels=['Total Spendings', 'Savings'],
        colors=['#ff9999','#66b3ff'],
        autopct='%1.1f%%', startangle=140)
plt.title("ðŸ’° Savings vs Spendings")
plt.show()

# âœ… Bar Graph: Per Category Spending (excluding savings)
plt.figure(figsize=(10,6))
spending_only = {k: v for k, v in predicted_dict.items() if k != 'Savings'}
plt.bar(spending_only.keys(), spending_only.values(), color='skyblue')
plt.xticks(rotation=45)
plt.ylabel("Amount (â‚¹)")
plt.title(f"ðŸ“Š Spending Allocation in {month}")
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.tight_layout()
plt.show()

# âœ… Optional Pie Chart: All Categories (excl. savings)
plt.figure(figsize=(8,8))
plt.pie([v for k,v in predicted_dict.items() if k != 'Savings'],
        labels=[k for k in predicted_dict if k != 'Savings'],
        autopct='%1.1f%%', startangle=90)
plt.title("Suggested Monthly Spend Distribution")
plt.show()